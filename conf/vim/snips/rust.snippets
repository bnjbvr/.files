#######################################################################
#                            Rust Snippets                            #
#######################################################################

priority -50

snippet idebug "Debug implementation"
	impl fmt::Debug for $1 {
		fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {
			write!(fmt, $2)
		}
	}

snippet idisplay
	impl fmt::Display for $1 {
		fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {
			write!(fmt, $2)
		}
	}

snippet idef "Default implementation"
	impl Default for $1 {
		fn default() -> Self {
			Self {
				$2
			}
		}
	}

snippet ifuture "Future implementation"
	impl std::future::Future for $1 {
		type Output = $2;

		fn poll(
			self: std::pin::Pin<&mut Self>,
			_cx: &mut std::task::Context<'_>,
		) -> std::task::Poll<Self::Output> {
			$3
		}
	}

snippet fn "fn name(?) -> ? {}"
	fn ${1:function_name}($2)${3/..*/ -> /}$3 {
		${VISUAL}$0
	}

snippet pfn "pub fn name(?) -> ? {}"
	pub fn ${1:function_name}($2)${3/..*/ -> /}$3 {
		${VISUAL}$0
	}

snippet ctor "constructor"
	pub fn new($1) -> Self {
		Self {
		}
	}

snippet s "struct"
	struct $1 {
		$2
	}

snippet i "impl"
	impl $1${2/..*/ for /}$2 {
		$3
	}

snippet drop "Drop implementation"
	impl Drop for $1 {
		fn drop(&mut self) {
			$2
		}
	}

snippet def "Default::default()"
	Default::default()

snippet ils "if let some"
	if let Some($1) = $2 {
		$3
	}

snippet lils "let var = if let some"
	let $1 = if let Some($2) = $3 {
		$2
	} else {
		$4
	};

snippet si "struct and impl"
	struct $1 {
		$2
	}

	impl $1 {
		fn new($2) -> Self {
			Self {
				$3
			}
		}
	}

snippet pln "println!(..)" b
	println!("$1"${2/..*/, /}$2);

snippet fmt "format!(..)"
	format!("$1"${2/..*/, /}$2);

snippet logt "log::trace!(...)"
	log::trace!("$1");

snippet logd "log::debug!(...)"
	log::debug!("$1");

snippet logi "log::info!(...)"
	log::info!("$1");

snippet logw "log::warn!(...)"
	log::warn!("$1");

snippet loge "log::error!(...)"
	log::error!("$1");

# vim:ft=snippets:
